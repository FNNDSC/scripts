#!/usr/bin/env python

'''

    This "pipeline" demonstrates a SIMD (single-instruction-multiple-data)
    architecture implementation within the context of the CHB PICES MOSIX
    cluster.

    Each stage of the pipeline essentially runs the same command (single
    instruction) on multiple subjects and hemispheres (multiple-data).

    Organizationally, each stage constructs for each of its data targets
    a single command string and then schedules this command on each data
    target on the PICES cluster.

    Stages are completely "fire-and-forget". Once scheduled, the stage has
    no direct mechanism of communicating with each job. Since each stage
    schedules multiple hundreds of jobs, it attempts in its postconditions
    check to query the MOSIX scheduler and count the instances of the
    job it has fired. When this count falls to zero, the jobs are all
    considered complete and the stage postconditions are satisfied.

    Stage postconditions are responsible for blocking processing. Only when
    these postconditions are satisfied does the main "thread" continue.
    Subsequent stages define their precondition check as a direct
    predecessor's postconditions.

'''

import  os
import  sys
import  string
import  argparse
import  time

from    _common import systemMisc       as misc
from    _common import crun
from    _common._colors import Colors

import  error
import  message
import  stage


import  fnndsc  as base
import  socket

class FNNDSC_labelsROI(base.FNNDSC):
    '''
    This class is a specialization of the FNNDSC base and generates
    MOSIX cluster scheduled runs of label dilation across passed
    FreeSurfer subjects.
    
    '''

    # 
    # Class member variables -- if declared here are shared
    # across all instances of this class
    #
    _dictErr = {
        'subjectSpecFail'   : {
            'action'        : 'examining command line arguments, ',
            'error'         : 'it seems that no subjects were specified.',
            'exitCode'      : 10},
        'noFreeSurferEnv'   : {
            'action'        : 'examining environment, ',
            'error'         : 'it seems that the FreeSurfer environment has not been sourced.',
            'exitCode'      : 11},
        'notClusterNode'    : {
            'action'        : 'checking the execution environemt, ',
            'error'         : 'script can only run on a cluster node.',
            'exitCode'      : 12},
        'subjectDirnotExist': {
            'action'        : 'examining the <subjectDirectories>, ',
            'error'         : 'the directory does not exist.',
            'exitCode'      : 13},
        'Load'              : {
            'action'        : 'attempting to pickle load object, ',
            'error'         : 'a PickleError occured.',
            'exitCode'      : 14}
    }

                    
    def __init__(self, **kwargs):
        '''
        Basic constructor. Checks on named input args, checks that files
        exist and creates directories.

        '''
        base.FNNDSC.__init__(self, **kwargs)

        self._lw                        = 60
        self._rw                        = 20
        self._l_subject                 = []
        
        self._str_subjectDir            = ''
        self._stageslist                = '12'
        
        for key, value in kwargs.iteritems():
            if key == 'subjectList':    self._l_subject         = value
            if key == 'stages':         self._stageslist        = value


    def initialize(self):
        '''
        This method provides some "post-constructor" initialization. It is
        typically called after the constructor and after other class flags
        have been set (or reset).
        
        '''

        # First, this script should only be run on cluster nodes.
        lst_clusterNodes = ['rc-drno', 'rc-russia', 'rc-thunderball',
                            'rc-goldfinger', 'rc-twice']
        str_hostname    = socket.gethostname()
        if str_hostname not in lst_clusterNodes:
            error.fatal(self, 'notClusterNode', 'Current hostname = %s' % str_hostname)

        # Set the stages
        self._pipeline.stages_canRun(False)
        lst_stages = list(self._stageslist)
        for index in lst_stages:
            stage = self._pipeline.stage_get(int(index))
            stage.canRun(True)

        # Check for FS env variable
        self._log('Checking on FREESURFER_HOME', debug=9, lw=self._lw)
        if not os.environ.get('FREESURFER_HOME'):
            error.fatal(self, 'noFreeSurferEnv')
        self._log('[ ok ]\n', debug=9, rw=self._rw, syslog=False)
            
        for str_subj in self._l_subject:
            self._log('Checking on subjectDir <%s>' % str_subj,
                        debug=9, lw=self._lw)
            if os.path.isdir(str_subj):
                self._log('[ ok ]\n', debug=9, rw=self._rw, syslog=False)
            else:
                self._log('[ not found ]\n', debug=9, rw=self._rw,
                            syslog=False)
                error.fatal(self, 'subjectDirnotExist')
                
    def run(self):
        '''
        The main 'engine' of the class.

        '''
        base.FNNDSC.run(self)
            

### Non-class methods
            
def synopsis(ab_shortOnly = False):
    scriptName = os.path.basename(sys.argv[0])
    shortSynopsis =  '''
    SYNOPSIS

            %s                                      \\
                            [--radius <dilationRadius>]         \\
                            [--intersection <plyDepth>          \\
                            [--stages <stages>]                 \\
                            [--query]                           \\
                            [-v|--verbosity <verboseLevel       \\
                            <Subj1> <Subj2> ... <SubjN>
    ''' % scriptName
  
    description =  '''
    DESCRIPTION

        `%s' performs a lobar region dilation for each of its passed
        <Subj> arguments.

    ARGS

      --radius <dilationRadius>
      The border size: from the edge of the lobar region, a border region
      of depth <dilationRadius> will be generated.

      --intersection <plyDepth>
      When creating label intersections, this specifies the ply depth of the
      intersection.
      
       --stages <stages>
       The stages to execute. This is specified in a string, such as '1234'
       which would imply stages 1, 2, 3, and 4.

       The special keyword 'all' can be used to turn on all stages.


    EXAMPLES


    ''' % (scriptName)
    if ab_shortOnly:
        return shortSynopsis
    else:
        return shortSynopsis + description


def f_blockOnScheduledJobs(**kwargs):
    '''
    
    '''
    str_blockCondition  = 'mosq listall | wc -l'
    str_blockProcess    = 'undefined'
    str_blockUntil      = "0"
    timepoll            = 10
    for key, val in kwargs.iteritems():
        if key == 'obj':                stage                   = val
        if key == 'blockCondition':     str_blockCondition      = val
        if key == 'blockUntil':         str_blockUntil          = val
        if key == 'blockProcess':
            str_blockProcess            = val
            str_blockCondition          = 'mosq listall | grep %s | wc -l' % str_blockProcess
        if key == 'timepoll':           timepoll                = val
    str_blockMsg    = '''\n
    Postconditions are still running: multiple '%s' instances
    detected in MOSIX scheduler. Blocking until all scheduled jobs are
    completed. Block interval = %s seconds.
    \n''' % (str_blockProcess, timepoll)
    str_loopMsg     = 'Waiting for scheduled jobs to complete... ' +\
                      '(hit <ctrl>-c to kill this script).'
                        
    stage.blockOnShellCmd(  str_blockCondition, str_blockUntil,
                            str_blockMsg, str_loopMsg, timepoll)
    return True

        
#
# entry point
#
if __name__ == "__main__":


    # always show the help if no arguments were specified
    if len( sys.argv ) == 1:
        print synopsis()
        sys.exit( 1 )

    l_subj      = []
    b_query     = False
    verbosity   = 0

    parser = argparse.ArgumentParser(description = synopsis(True))
    
    parser.add_argument('l_subj',
                        metavar='SUBJECT', nargs='+',
                        help='SubjectIDs to process')
    parser.add_argument('--verbosity', '-v',
                        dest='verbosity', 
                        action='store',
                        default=0,
                        help='verbosity level')
    parser.add_argument('--stages', '-s',
                        dest='stages',
                        action='store',
                        default='01',
                        help='analysis stages')
    parser.add_argument('--radius', '-r',
                        dest='radius',
                        action='store',
                        default=20,
                        help='dilation radius')
    parser.add_argument('--intersection', '-i',
                        dest='intersection',
                        action='store',
                        default=20,
                        help='intersection ply level')

    args = parser.parse_args()

    # First, define the container pipeline
    labelsROI = FNNDSC_labelsROI(
                        subjectList     = args.l_subj,
                        stages          = args.stages,
                        logTo           = 'zrs5-labelsROI.log',
                        syslog          = True,
                        logTee          = True
                        )
    labelsROI.verbosity(args.verbosity)
    pipeline    = labelsROI.pipeline()
    pipeline.name('labelsROI')
    pipeline.poststdout(True)
    pipeline.poststderr(True)

    # Now define each stage...

    #
    # Stage 0
    # This is a callback stage, demonstrating how python logic is used
    # to create multiple cluster-based processing instances of the same
    # core FreeSurfer command, each with slightly different operating
    # flags.
    # 
    # In some ways, the stage0.def_stage(...) is vaguely reminiscent
    # of javascript, in as much as the f_stage0callback is a 
    # callback function.
    #
    # PRECONDITIONS:
    # o Check that script is running on a cluster node.
    # 
    stage0 = stage.Stage(
                        name            = 'Lobes_dilate',
                        fatalConditions = True,
                        syslog          = True,
                        logTo           = 'zrs5-labelsROI-lobes_dilate.log',
                        logTee          = True
                        )
    def f_stage0callback(**kwargs):
        str_cwd         =  os.getcwd()
        lst_subj        = []
        pmakePort       = 1701
        for key, val in kwargs.iteritems():
            if key == 'subj':   lst_subj        = val
            if key == 'obj':    stage           = val
        for subj in lst_subj:
            str_prefixCmd = '( cd %s/%s/label ; ' % (str_cwd, subj)
            for hemi in ['lh', 'rh']:
                for lobe in ['frontal', 'parietal', 'temporal', 'occipital']:
                    log = stage.log()
                    log('Scheduling %s-%s-%s...\n' % (subj, hemi, lobe))
                    str_cmd = 'mris_pmake --port %d --subj %s --hemi %s \
                        --mpmProg ROI \
                        --mpmArgs radius:%s,plySaveStaggered:1,borderOnly:1,labelFile:%s.%s.label \
                        --mpmOverlay euclidean )' % \
                        (pmakePort, subj, hemi, args.radius, hemi, lobe)
                    #str_cmd = 'sleep 10 )'
                    cluster = crun.crun_mosix(cmdPrefix=str_prefixCmd)
                    cluster.echo(False)
                    cluster.echoStdOut()
                    cluster.detach()
                    cluster(str_cmd, waitForChild=False)
                    pmakePort += 1
        return True
    stage0.def_stage(f_stage0callback, subj=args.l_subj, obj=stage0)
    stage0.def_postconditions(f_blockOnScheduledJobs, obj=stage0,
                              blockProcess    = 'mris_pmake')
    
    #
    # Stage 1
    # This is a callback stage, creating multiple runs of 'mris_label_calc'
    # to create intersection regions.
    #
    # PRECONDITIONS:
    # o 'mosq listall | grep mris_pmake | wc -l' evaluating to zero
    # 
    stage1 = stage.Stage(
                        name            = 'border_intersect',
                        fatalConditions = True,
                        syslog          = True,
                        logTo           = 'zrs5-labelsROI-border_intersect.log',
                        logTee          = True
                        )
    stage1.def_preconditions(stage0.def_postconditions()[0], **stage0.def_postconditions()[1])
    def f_stage1callback(**kwargs):
        str_cwd         =  os.getcwd()
        lst_subj        = []

        for key, val in kwargs.iteritems():
            if key == 'subj':   lst_subj        = val
            if key == 'obj':    stage           = val
        lst_lobe        = ['frontal', 'parietal', 'temporal', 'occipital']
        lst_intersect   = []
        for i in range(0, len(lst_lobe)):
            for j in range(i+1, len(lst_lobe)):
                str_intersection = '%s-%s' % (lst_lobe[i], lst_lobe[j])
                if str_intersection != 'frontal-occipital':
                    lst_intersect.append(str_intersection)
        for subj in lst_subj:
            str_prefixCmd = '( cd %s/%s/label ; ' % (str_cwd, subj)
            for hemi in ['lh.', 'rh.']:
                for intersection in lst_intersect:
                    log = stage.log()
                    log('Scheduling %s-%s%s...\n' % (subj, hemi, intersection))
                    lst_lobes   = intersection.split('-')
                    # Add hemi to each intersection target
                    lst_lobesHemi  = [prefix+elt for elt in lst_lobes for prefix in [hemi]]
                    # Add suffix to each intersection target
                    lst_lobesFull  = [elt+suffix for elt in lst_lobesHemi \
                        for suffix in ['-r%s-ply%s.label' % (args.radius, args.intersection)]]
                    str_cmd = 'mris_label_calc intersect %s %s %s )' % \
                        (lst_lobesFull[0], lst_lobesFull[1], \
                        '%sintersect-%s-r%s-ply%s.label' % \
                        (hemi, intersection, args.radius, args.intersection))
                    #str_cmd = 'sleep 10 )'
                    cluster = crun.crun_mosix(cmdPrefix=str_prefixCmd)
                    cluster.echo(False)
                    cluster.echoStdOut()
                    cluster.detach()
                    cluster(str_cmd, waitForChild=False)
        return True
    stage1.def_stage(f_stage1callback, subj=args.l_subj, obj=stage1)
    stage1.def_postconditions(f_blockOnScheduledJobs, obj=stage1,
                              blockProcess    = 'mris_label_calc')

    #
    # Stage 2
    # This is a callback stage, creating multiple runs of 'mris_label2annot'
    # to build and annotation structure that will be used in the curvature 
    # analysis.
    #
    # PRECONDITIONS:
    # o 'mosq listall | grep mris_label_calc | wc -l' evaluating to zero
    #
    stage2 = stage.Stage(
                        name            = 'annotation_create',
                        fatalConditions = True,
                        syslog          = True,
                        logTo           = 'zrs5-labelsROI-annotation_create.log',
                        logTee          = True
                        )
    
    stage2.def_preconditions(stage1.def_postconditions()[0], **stage1.def_postconditions()[1])
    def f_stage2callback(**kwargs):
        str_cwd         =  os.getcwd()
        lst_subj        = []
        str_subjectDir  = os.environ['SUBJECTS_DIR']

        for key, val in kwargs.iteritems():
            if key == 'subj':   lst_subj        = val
            if key == 'obj':    stage           = val
        shell   = crun.crun()
        log     = stage.log()
        for subj in lst_subj:
            str_prefixCmd = '( cd %s/%s/label ; ' % (str_cwd, subj)
            for hemi in ['lh', 'rh']:
                shell('cd %s/%s/label ; ls %s.intersect*r%s-ply%s*label' % \
                    (str_cwd, subj, hemi, args.radius, args.intersection))
                lst_intersect = shell.stdout().split()
                lst_intersectLbl = [prefix+elt for elt in lst_intersect for prefix in ['--l ']]
                str_cmd = 'rm %s.intersect-r%s-ply%s.annot; ' % (hemi, args.radius, args.intersection) + \
                          'mris_label2annot --s %s --hemi %s ' % (subj, hemi) + \
                          '--ctab %s/../annot/colortable_intersect.txt ' % str_subjectDir + \
                          ' '.join(lst_intersectLbl) + \
                          ' --a intersect-r%s-ply%s )' % (args.radius, args.intersection)
                log('Scheduling %s-%s-intersection annotation...\n' % (subj, hemi))
                cluster = crun.crun_mosix(cmdPrefix=str_prefixCmd)
                cluster.echo(False)
                cluster.echoStdOut()
                cluster.detach()
                cluster(str_cmd, waitForChild=False)
        return True
    stage2.def_stage(f_stage2callback, subj=args.l_subj, obj=stage2)
    stage2.def_postconditions(f_blockOnScheduledJobs, obj=stage2,
                              blockProcess    = 'mris_label2annot')
    
    # Add all the stages to the pipeline  
    labelsROI.stage_add(stage0)
    labelsROI.stage_add(stage1)
    labelsROI.stage_add(stage2)

    # Initialize the pipeline and ... run!
    labelsROI.initialize()
    labelsROI.run()
  
