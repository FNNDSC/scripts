#!/bin/bash

G_SYNOPSIS="

  NAME
  
        lnchd - change destination of a link.
        
  SYNOPSIS
  
        lnchd [-s <dirSubString>] <newBaseDir> <link1> <link2> ... <linkN>
        
  DESCRIPTION
  
        'lnchd' preserves the relationship between a created link and its 
        original destination, but replaces the original destination
        directory with <newBaseDir>.

        It is useful when the original source file(s) have been moved (leaving
        the original links to these files dead) or when links need to be 
        switched to a <newBaseDir> but keep the original end target of the
        original link.
        
        'lnchd' preserves the original link name (which differ from the
        actual target of the link).
	
  ARGUMENTS
  
  	-s <dirSubString>
	A sed-friendly regex that will applied to each <link> to create the
	new link target string.

  EXAMPLES

        $>cd /some/dir
        $>lnchd /some/new/dir ln1 ln2 ... lnN  
        In this snippet, /some/dir contains symbolic links along the lines of

            ln1 -> /original/dir/target1
            ln2 -> /original/dir/target2
                          ...
            lnN -> /original/dir/targetN

        Assume that the targets (target1, target2, ..., targetN) have all been
        moved to a new location, /some/new/dir. All the original links are now 
        dead. Alternatively, it could be that a copy of the targets now exist
        in /some/new/dir and the links need to re-assigned to this new copy.
        
        By running the above lnchd, the links are re-assigned to

            ln1 -> /some/new/dir/target1
            ln2 -> /some/new/dir/target2
                          ...
            lnN -> /some/new/dir/targetN
            
        The link will only be restored if /some/new/dir/targetN is itself
        valid.

"

if (( ! ${#1} )) ; then
    echo "$G_SYNOPSIS"
    exit 1
fi

let b_verbose=0
let b_regex=0

while getopts "s:vh" option ; do
        case "$option"
        in
		s) REGEX=$OPTARG
		   b_regex=1		;;
                v) b_verbose=1 		;;
                h) echo "$G_SYNOPSIS"	;;
                \?) echo "$G_SYNOPSIS" 	;;
        esac
done
shift $(($OPTIND - 1))

if (( !b_regex )) ; then 
	NEWDIR=$1
	LNTARGETS=$(echo $* | awk '{for(i=2; i<=NF; i++) printf("%s ", $i);}')
else
	LNTARGETS="$*"
fi
	
for TARGET in $LNTARGETS ; do
     if [[ -h $TARGET ]] ; then
	 LINK=$(/bin/ls -l $TARGET | awk '{print $NF}')
	 ORIGTARGET=$(basename $LINK)
	 ORIGNAME=$(/bin/ls -l $TARGET | grep $LINK | awk '{print $9}')
	 if (( b_regex )) ; then
		 CMD="echo $LINK | sed '$REGEX'"
		 NEWDIR=$(eval "$CMD")
		 NEWDIR=$(dirname $NEWDIR)
	 fi
	 
	 if [[ -d ${NEWDIR}/$ORIGTARGET || -f ${NEWDIR}/$ORIGTARGET ]] ; then
            rm $TARGET
	    if (( b_verbose )) ; then
                printf "OLD: %20s -> %30s\n" "$ORIGNAME" "$LINK" 
                printf "NEW: %20s -> %30s\n\n" "$ORIGNAME" "${NEWDIR}/$ORIGTARGET" 
    	    fi
            ln -s ${NEWDIR}/$ORIGTARGET $ORIGNAME
	 else
	    printf "%60s%20s\n" "<$ORIGTARGET> not found in target" "[ skipping ]"
	 fi
     else
	 printf "\n\t'$TARGET' is not a symbolic link.\n"
	 printf "\tNo action performed.\n"
	 # exit 2
    fi
done
