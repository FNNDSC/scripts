#!/usr/bin/env python
import  os
import  sys
import  string
import  getopt
import  argparse
import  csv
from    _common import systemMisc       as misc
from    _common import crun

import  error
import  message
import  stage


class ZRS5():
    '''
    This is the main 'controller' class for the dyslexia curvature analysis.

    There are several 'modules' that are executed in pipeline-order. The
    actual modules to run can be specified before running the pipeline.
    
    '''

    # 
    # Class member variables -- if declared here are shared
    # across all instances of this class
    #
    _dictErr = {
        'subjectSpecFail'   : {
            'action'        : 'examining command line arguments, ',
            'error'         : 'it seems that no subjects were specified.',
            'exitCode'      : 10},
        'subjectDirnotExist': {
            'action'        : 'examining the <subjectDirectories>, ',
            'error'         : 'the directory does not exist.',
            'exitCode'      : 13},
        'Load'              : {
            'action'        : 'attempting to pickle load object, ',
            'error'         : 'a PickleError occured.',
            'exitCode'      : 14}
    }


    def log(self):
        '''
        Returns the internal pipeline log message object. Caller can further
        manipulate the log object with object-specific calls.
        '''
        return self._log


    def name(self, *args):
        '''
        get/set the descriptive name text of this pipeline object.
        '''
        if len(args):
            self.__name = args[0]
        else:
            return self.__name

    
    def vprintf(self, alevel, format, *args):
        '''
        A verbosity-aware print.
        
        '''
        if self._verbosity and self._verbosity <= alevel:
            sys.stdout.write(format % args)
            
        
    def __init__(self, **kwargs):
        '''
        Basic constructor. Checks on named input args, checks that files
        exist and creates directories.

        '''
        self.__name                     = 'zrs'
        self._verbosity                 = 0
        self._log                       = message.Message()

        self._pipeline                  = stage.Pipeline(name = 'zrs')

        self._l_subject                 = []
        
        self._str_subjectDir            = ''
        self._b_debugMode               = False
        
        for key, value in kwargs.iteritems():
            if key == 'subjectList':    self._l_subject         = value
            if key == 'syslog':         self.log().syslog(value)
            if key == 'logTo':          self.log().to(value)
            if key == 'logTee':         self.log().tee(value)


    def initialize(self):
        '''
        This method provides some "post-constructor" initialization. It is
        typically called after the constructor and after other class flags
        have been set (or reset).
        
        '''
        for str_subj in self._l_subject:
            self.vprintf(9, '%30s', ('Checking on subjectDir <%s>' % str_subj))
            if os.path.isdir(str_subj):
                self.vprintf(9, '%30s\n', '[ ok ]')

                
    def run(self):
        '''
        The main 'engine' of the class.

        '''
        self._log('Starting zrs5...\n')
        self._pipeline.execute()
        self._log('Finished zrs5\n')

        
    def pipeline(self, *args):
        if len(args):
            self._pipeline              = args[0]
        else:
            return self._pipeline


    def stage_add(self, stage):
        self._pipeline.stage_add(stage)

        
    def verbosity(self, *args):
        if len(args):
            self._verbosity             = args[0] 
        else:
            return self._verbosity
            
            
def synposis(ab_shortOnly = False):
    scriptName = os.path.basename(sys.argv[0])
    shortSynopsis =  '''
    SYNOPSIS

            %s                                            \\
                            [--stages <stages>]             \\
                            [--query]                       \\
                            [-v|--verbosity <verboseLevel>] \\
                            <Subj1> <Subj2> ... <SubjN>
    ''' % scriptName
  
    description =  '''
    DESCRIPTION

            `%s' is a meta-controller for setting up and analyzing a set of Dyslexia
            experiments.

    ARGS


    EXAMPLES


    ''' % (scriptName)
    if ab_shortOnly:
        return shortSynopsis
    else:
        return shortSynopsis + description


#
# entry point
#
if __name__ == "__main__":

    # always show the help if no arguments were specified
    if len( sys.argv ) == 1:
        print synopsis()
        sys.exit( 1 )

    l_subj      = []
    b_query     = False
    verbosity   = 0

    parser = argparse.ArgumentParser(description = synposis(True))
    
    parser.add_argument('l_subj',
                        metavar='SUBJECT', nargs='+',
                        help='SubjectIDs to process')
    parser.add_argument('--verbosity', '-v',
                        dest='verbosity', 
                        action='store_const',
                        const=0, default=0,
                        help='verbosity level')
    parser.add_argument('--stages', '-s',
                        dest='stages',
                        action='store_const',
                        const=1, default=1,
                        help='analysis stages')

    args = parser.parse_args()

    zrs5 = ZRS5(        subjectList     = args.l_subj,
                        logTo           = 'zrs5.log',
                        syslog          = True,
                        logTee          = True)
    zrs5.verbosity(verbosity)

    stage1 = stage.Stage_crun(
                        name            = 'Lobes_annotate',
                        fatalConditions = True,
                        syslog          = True,
                        logTo           = 'zrs-lobes_annotate.log',
                        logTee          = True,
                        cmd             ='lobe_annot.sh -S ' + ' '.join(args.l_subj)
                        )
    
    
    zrs5.stage_add(stage1)
#    print stage1.cmd()
    zrs5.run()
  
