#!/usr/bin/env python
import  os
import  sys
import  string
import  argparse
from    _common import systemMisc       as misc
from    _common import crun

import  error
import  message
import  stage

import  fnndsc  as base

class FNNDSC_ZRS5(base.FNNDSC):
    '''
    This class is a specialization of the FNNDSC base and geared to dyslexia
    curvature analysis.
    
    '''

    # 
    # Class member variables -- if declared here are shared
    # across all instances of this class
    #
    _dictErr = {
        'subjectSpecFail'   : {
            'action'        : 'examining command line arguments, ',
            'error'         : 'it seems that no subjects were specified.',
            'exitCode'      : 10},
        'subjectDirnotExist': {
            'action'        : 'examining the <subjectDirectories>, ',
            'error'         : 'the directory does not exist.',
            'exitCode'      : 13},
        'Load'              : {
            'action'        : 'attempting to pickle load object, ',
            'error'         : 'a PickleError occured.',
            'exitCode'      : 14}
    }

                    
    def __init__(self, **kwargs):
        '''
        Basic constructor. Checks on named input args, checks that files
        exist and creates directories.

        '''
        base.FNNDSC.__init__(self, **kwargs)

        self._lw                        = 60
        self._rw                        = 20
        self._l_subject                 = []
        
        self._str_subjectDir            = ''
        
        for key, value in kwargs.iteritems():
            if key == 'subjectList':    self._l_subject         = value


    def initialize(self):
        '''
        This method provides some "post-constructor" initialization. It is
        typically called after the constructor and after other class flags
        have been set (or reset).
        
        '''
        for str_subj in self._l_subject:
            self._log('Checking on subjectDir <%s>' % str_subj,
                        debug=9, lw=self._lw)
            if os.path.isdir(str_subj):
                self._log('[ ok ]\n', debug=9, rw=self._rw)
            else:
                self._log('[ not found ]\n', debug=9, rw=self._rw,
                            syslog=False)
                error.fatal(self, 'subjectDirnotExist')
            

                
    def run(self):
        '''
        The main 'engine' of the class.

        '''
        base.FNNDSC.run(self)
            
            
def synopsis(ab_shortOnly = False):
    scriptName = os.path.basename(sys.argv[0])
    shortSynopsis =  '''
    SYNOPSIS

            %s                                            \\
                            [--stages <stages>]             \\
                            [--query]                       \\
                            [-v|--verbosity <verboseLevel>] \\
                            <Subj1> <Subj2> ... <SubjN>
    ''' % scriptName
  
    description =  '''
    DESCRIPTION

            `%s' is a meta-controller for setting up and analyzing a set of Dyslexia
            experiments.

    ARGS


    EXAMPLES


    ''' % (scriptName)
    if ab_shortOnly:
        return shortSynopsis
    else:
        return shortSynopsis + description


#
# entry point
#
if __name__ == "__main__":


    # always show the help if no arguments were specified
    if len( sys.argv ) == 1:
        print synopsis()
        sys.exit( 1 )

    l_subj      = []
    b_query     = False
    verbosity   = 0

    parser = argparse.ArgumentParser(description = synopsis(True))
    
    parser.add_argument('l_subj',
                        metavar='SUBJECT', nargs='+',
                        help='SubjectIDs to process')
    parser.add_argument('--verbosity', '-v',
                        dest='verbosity', 
                        action='store',
                        default=0,
                        help='verbosity level')
    parser.add_argument('--stages', '-s',
                        dest='stages',
                        action='store_const',
                        const=1, default=1,
                        help='analysis stages')

    args = parser.parse_args()

    zrs5 = FNNDSC_ZRS5( subjectList     = args.l_subj,
                        logTo           = 'zrs5.log',
#                        logTo           = sys.stdout,
                        syslog          = True,
                        logTee          = True)
    zrs5.verbosity(args.verbosity)
    zrs5.initialize()

    stage1 = stage.Stage_crun(
                        name            = 'Lobes_annotate',
                        fatalConditions = True,
                        syslog          = True,
                        logTo           = 'zrs-lobes_annotate.log',
                        logTee          = True,
                        cmd             = 'lobe_annot.sh -v 10 -S ' + ' '.join(args.l_subj)
                        )


    stage2 = stage.Stage(
                        name            = 'Callback',
                        fatalConditions = True,
                        syslog          = True,
                        logTo           = 'zrs-callback.log',
                        logTee          = True
                        )
    def f_stage2callback(**kwargs):
        f_sum = 0
        for i in range(0, 10000):
            f_sum = f_sum+i
        stage2.stdout('f_sum = %d\n' % f_sum)
        return True

      
    stage2.def_stage(f_stage2callback)
      
    zrs5.stage_add(stage1)
    zrs5.stage_add(stage2)

    zrs5.run()
  
