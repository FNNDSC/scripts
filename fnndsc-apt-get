#!/bin/bash
#
# Copyright 2010 Rudolph Pienaar, Dan Ginsburg, FNNDSC
# Childrens Hospital Boston
#
# SPDX-License-Identifier: MIT
#

# "include" the set of common script functions
source common.bash
declare -i Gi_verbose=0


G_HOSTLISTG6="rc-drno,rc-twice,rc-thunderball,rc-goldfinger,rc-russia"
G_HOSTLISTG8="rc-majesty,rc-golden,rc-moonraker,rc-live,rc-loved,rc-only,rc-forever"
G_HOSTLISTMEG="pandora,mario,saggfire,glacier,iceberg"
G_HOSTLISTFNNDSC="shaka,paris,pretoria,natal,sparks, capetown,vuka"

G_HOSTLIST="$G_HOSTLISTG6,$G_HOSTLISTG8"

G_LOG=/neuro/sys/install/ubuntu/setup/fnndsc-apt-get.packages

G_SYNOPSIS="

  NAME

        fnndsc-apt-get 

  SYNOPSIS
  
        fnndsc-apt-get	[-h <hostlist>] [-v <verbosityLevel>] [-l <packageLog>] \\
			[-i]							\\
                        [apt-get-args]

  DESC

        'fnndsc-apt-get' is a thin wrapper about apt-get that is spawned off
        on each machine in <hostlist>.
        
        Packages are also automatically appended to a log file.

  ARGS

        -h <hostlist> (Optional: default 'pices')
        List of hosts on which to perform remote 'apt-get [apt-get-args]'.
        Hosts are specified as comma delimited list with no white space.
        Several convenience lists are available:
        
                -h g6		: the g6 cluster hosts
                -h g8		: the g8 cluster hosts
		-h pices	: *all* the cluster hosts
                -h meg          : all the MEG hosts
                -h fnndsc       : all the 1 Autumn hosts
        
        -l <packageLog> (Optional)
        Log the [apt-get-args] to this file.
        
	-v <verbosityLevel> (Optional)
	Verbosity level. A value of '10' is a good choice here.

	-i
	Ignore release check. If specified, don't check if the host
	and target release are the same.
        
  HISTORY
    
  20 April 2011
  o Initial design and coding.

  05 March 2014
  o Added 'g8' cluster nodes.

  26 June 2014
  o Consolidate all cluster nodes into 'pices'.

  13 March 2015
  o Add '-i' flag.
"

A_args="checking command line arguments"
A_packages="collecting package info from remote host"
A_release="checking release versions"
A_noAptGetArgs="checking on command line"
A_execRemoteApt="executing remote apt-get"

EM_args="you *must* specify a '-h <remoteHost>'."
EM_packages="I was not able to successfully collect the package state."
EM_release="the remote host and this host are not the same Ubuntu release."
EM_noAptGetArgs="no remote apt-get args were specified"
EM_execRemoteApt="an error occurred."

EC_args=10
EC_packages=11
EC_release=12
EC_noAptGetArgs=14
EC_execRemoteApt=15

declare -i Gb_skipReleaseCheck=0


while getopts h:l:v:i option ; do
    case "$option" 
    in
        v) Gi_verbose=$OPTARG   	;;
        h) G_HOSTLIST=$OPTARG   	;;
        l) G_LOG=$OPTARG        	;;
	i) Gb_skipReleaseCheck=1	;;
        *) synopsis_show        	;;
    esac
done

case $G_HOSTLIST 
in
        "g6")        	G_HOSTLIST=$G_HOSTLISTG6     		;;
        "g8")        	G_HOSTLIST=$G_HOSTLISTG8     		;;
	"pices")	G_HOSTLIST=$G_HOSTLIST			;;
        "meg")          G_HOSTLIST=$G_HOSTLISTMEG       	;;
        "fnndsc")       G_HOSTLIST=$G_HOSTLISTFNNDSC    	;;
esac
    
shift $((OPTIND - 1))
APTGETARGS=$*
if (( ! ${#APTGETARGS} )) ; then fatal noAptGetArgs ; fi

for HOST in $(echo "$G_HOSTLIST" | tr ',' ' ') ; do
        cprint "Remote host" "[ $HOST ]"

	if (( !Gb_skipReleaseCheck )) ; then
	        lprint "Local release info" 
        	LOCALRELEASE=$(cat /etc/issue)
        	rprint "[ $LOCALRELEASE ]"

        	lprint "Remote release info"
        	REMOTERELEASE=$(ssh $HOST cat /etc/issue)
        	rprint "[ $REMOTERELEASE ]"

        	lprint "Local and remote release"
        	if [[ "$LOCALRELEASE" == "$REMOTERELEASE" ]]  ; then
                	rprint "[ ok ]"
        	else
                	fatal release
        	fi
	fi
        statusPrint "Executing remote \"apt-get $APTGETARGS\"" "\n"
        ssh -t $HOST sudo apt-get "$APTGETARGS"
        REMOTESTATUS=$?
        lprint "Checking return result"
        ret_check $REMOTESTATUS || fatal execRemoteApt
        logstr=$(sysprint "| (whoami=$(whoami), remote=$HOST) apt-get $APTGETARGS")
        echo $logstr >> $G_LOG
done


