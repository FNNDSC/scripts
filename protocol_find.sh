#!/bin/bash

# "include" the set of common script functions
source common.bash

declare -i Gi_mtime=-365
declare -i Gi_verbosity=10

G_TOCFILE="toc.txt"
G_SEQUENCE="-x"
G_DICOMROOTDIR="$CHRIS_SESSIONPATH"

G_SYNOPSIS="
 NAME

        protocol_find.sh

 SYNOPSIS

        protocol_find.sh        -s <sequenceName>                       \\
				-f <filterFile>				\\
                                [-t <mtimeArg>]                         \\

 DESCRIPTION

        'protocol_find.sh' greps through the 'toc.txt' table-of-contents
        files for each directory specified in <filterFile>, searching
	for a specific sequence, <sequenceName>.

        The optional <mtimeArg> can be used to provide a cutoff time. By
        default, the script will search in all sequences pushed over the
        last year.

 ARGUMENTS

        -v <level> (optional)
        Verbosity level.

        -s <sequenceName>
        A string to search for in the toc.txt files. For best results, keep
        this as short as possible.

	-f <filterFile>
	A file (typically generated by 'dcm_MRIDget.bash') that specifies
	a set of directories in the DICOM root dir to search.

        -t <mtimeArg> (default: $Gi_mtime)
        The time window cutoff for the search. Only files that have been pushed
        prior to the cutoff date are searched. For example, to search only over
        the last week of pushed sequences, use '-t -7'.

 HISTORY
 03-Mar-2009
 o Initial design and coding.
"

# Actions
A_noSequenceArg="checking on the sequence argument"
A_noFilterFile="checking on the filter file"

# Error messages
EM_noSequenceArg="you haven't specified a sequence directory."
EM_noFilterFile="file not found!"

# Error codes
EC_noSequenceArg=1
EC_noFilterFile=2


###\\\
# Process command options
###///

while getopts s:t:f: option ; do
        case "$option"
        in
                s)      G_SEQUENCE=$OPTARG              ;;
                t)      Gi_mtime=$OPTARG                ;;
                f)      G_FILTER="$OPTARG"              ;;
                \?)     synopsis_show
                        exit 0;;
        esac
done

if [[ "$G_SEQUENCE" == "-x" ]] ; then fatal noSequenceArg ; fi
Gb_verbose=0
lprint "Checking on <filterFile>"
fileExist_check $G_FILTER || fatal noFilterFile
G_FILTERDIR=$(dirname $G_FILTER)
cd $G_FILTERDIR ; G_FILTERDIR=$(pwd)
G_FILTERFILE=$(basename $G_FILTER)

cd $G_DICOMROOTDIR

SEARCH=$(for DIR in $(cat ${G_FILTERDIR}/${G_FILTERFILE} | awk '{print $1}') ; do
    dirExist_check $DIR >/dev/null
    if (( !$? )) ; then
      cd $DIR >/dev/null ;
      for SEQUENCE in $(echo $G_SEQUENCE | tr ',' ' ') ; do
	printf "%60s" $DIR;
	SEQ=$(cat toc.txt 2>/dev/null | grep -i $SEQUENCE | head -n 1);
	MRID=$(cat toc.txt 2>/dev/null | grep "Patient ID" | awk '{print $3}')
	if (( ${#MRID} )) ; then
		printf "%10s" 		" | $MRID | "
	fi
	if (( ${#SEQ} )) ; then
		NAME=$(echo $SEQ | awk '{for(i=3; i<=NF; i++) printf("%s ", $i);}')
		printf "%-30s\n" 	"$NAME"
	else
		printf "%30s\n"		"Not found";
	fi;
      done
      cd ../;
    fi
done)

echo "$SEARCH" | grep -v "Not" | sort -t \| -k 2

